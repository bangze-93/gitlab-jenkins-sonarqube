---
- name: GitLab Jenkins SonarQube
  hosts: all
  become: yes
  become_method: sudo
  vars:
    gitlab_version: 16.9.1-ce.0
    jenkins_version: 2.440.1
    sonarqube_version: lts-community
    postgres_version: 12
    gitlab_network: gitlab
    jenkins_network: jenkins
    sonarqube_network: sonarqube
    postgres_user: sonar
    postgres_password: Son4RQub3
  tasks:
    - name: Update and upgrade packages
      ansible.builtin.apt:
        upgrade: 'yes'
        state: present
        update_cache: true
        cache_valid_time: 86400

    - name: Create keyrings directory
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: 0755

    - name: Add docker gpg key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        keyring: /etc/apt/keyrings/docker.gpg
        state: present

    - name: Add docker repository
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        filename: docker
        state: present

    - name: Install docker and required packages
      ansible.builtin.apt:
        pkg:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin 
          - docker-compose-plugin
          - net-tools
        state: present
        update_cache: true
      register: docker_install

    - name: Restart docker 
      ansible.builtin.service:
        name: docker
        state: restarted
        enabled: true
      when: docker_install.changed

    - name: Create volume directory for GitLab
      ansible.builtin.file:
        path: /opt/gitlab/{{ item }}
        state: directory
      loop:
        - config
        - data
        - logs
      when: inventory_hostname == 'gitlab'

    - name: Create volume directory for Jenkins
      ansible.builtin.file:
        path: /opt/jenkins/{{ item }}
        state: directory
        owner: 1000
        group: 1000
      loop:
        - certs
        - data
      when: inventory_hostname == 'jenkins'

    - name: Copy Dockerfile to Jenkins
      ansible.builtin.template:
        src: Dockerfile-jenkins
        dest: /opt/jenkins/Dockerfile
        mode: 0644
      when: inventory_hostname == 'jenkins'

    - name: Create volume directory for SonarQube
      ansible.builtin.file:
        path: /opt/sonarqube/{{ item }}
        state: directory
        owner: 1000
        group: 1000
      loop:
        - data
        - extensions
        - logs
      when: inventory_hostname == 'sonarqube'

    - name: Create volume directory for PostgreSQL
      ansible.builtin.file:
        path: /opt/postgresql/data
        state: directory
        owner: 1000
        group: 1000
      when: inventory_hostname == 'sonarqube'

    - name: Configure sysctl for SonarQube
      ansible.builtin.copy:
        src: sysctl-99-sonarqube.conf
        dest: /etc/sysctl.d/99-sonarqube.conf
        mode: 0644
      when: inventory_hostname == 'sonarqube'

    - name: Configure limits for SonarQube
      ansible.builtin.copy:
        src: limits-99-sonarqube.conf
        dest: /etc/security/limits.d/99-sonarqube.conf
        mode: 0644
      when: inventory_hostname == 'sonarqube'

    - name: Reload sysctl for SonarQube
      ansible.builtin.command: sysctl --system 
      when: inventory_hostname == 'sonarqube'

    - name: Create a network for GitLab
      community.docker.docker_network:
        name: "{{ gitlab_network }}"
      when: inventory_hostname == 'gitlab'

    - name: Create a network for Jenkins
      community.docker.docker_network:
        name: "{{ jenkins_network }}"
      when: inventory_hostname == 'jenkins'

    - name: Create a network for SonarQube
      community.docker.docker_network:
        name: "{{ sonarqube_network }}"
      when: inventory_hostname == 'sonarqube'

    - name: Create GitLab container
      community.docker.docker_container:
        name: gitlab
        image: gitlab/gitlab-ce:{{ gitlab_version }}
        restart_policy: always
        hostname: gitlab
        ports:
          - '80:80'
          - '443:443'
          - '23:22'
        volumes:
          - /opt/gitlab/config:/etc/gitlab
          - /opt/gitlab/logs:/var/log/gitlab
          - /opt/gitlab/data:/var/opt/gitlab
        shm_size: 256m
        networks:
          - name: "{{ gitlab_network }}"
      when: inventory_hostname == 'gitlab'
    
    - name: Build image for Jenkins
      ansible.builtin.shell:
        cmd: docker build -t jenkins-blueocean:{{ jenkins_version }} .
        chdir: /opt/jenkins
      when: inventory_hostname == 'jenkins'

    - name: Create Jenkins BlueOcean container
      community.docker.docker_container:
        name: jenkins-blueocean
        hostname: jenkins
        image: jenkins-blueocean:{{ jenkins_version }}
        restart_policy: on-failure
        ports:
          - '8080:8080'
          - '50000:50000'
        env:
          DOCKER_HOST: "tcp://docker:2376"
          DOCKER_CERT_PATH: "/certs/client"
          DOCKER_TLS_VERIFY: "1"
        volumes:
          - /opt/jenkins/data:/var/jenkins_home
          - /opt/jenkins/certs:/certs/client:ro
        networks:
          - name: "{{ jenkins_network }}"
      when: inventory_hostname == 'jenkins'

    - name: Create Jenkins Docker dind container
      community.docker.docker_container:
        name: jenkins-docker
        hostname: docker
        image: docker:dind
        restart_policy: on-failure
        privileged: true
        ports:
          - '2376:2376'
        env:
          DOCKER_TLS_CERTDIR: "/certs"
        volumes:
          - /opt/jenkins/data:/var/jenkins_home
          - /opt/jenkins/certs:/certs/client
        command: "--storage-driver overlay2"
        networks:
          - name: "{{ jenkins_network }}"
      when: inventory_hostname == 'jenkins'

    - name: Create PostgreSQL container
      community.docker.docker_container:
        name: postgresql
        hostname: postgresql
        image: postgres:{{ postgres_version }}
        restart_policy: always
        ports:
          - '127.0.0.1:5432:5432'
        env:
          POSTGRES_USER: "{{ postgres_user }}"
          POSTGRES_PASSWORD: "{{ postgres_password }}"
        volumes:
          - /opt/postgresql:/var/lib/postgresql
          - /opt/postgresql/data:/var/lib/postgresql/data
        networks:
          - name: "{{ sonarqube_network }}"
      when: inventory_hostname == 'sonarqube'

    - name: Wait for PostgreSQL container to be ready
      ansible.builtin.wait_for:
        port: 5432
        delay: 10
        timeout: 180
      when: inventory_hostname == 'sonarqube'

    - name: Create SonarQube container
      community.docker.docker_container:
        name: sonarqube
        image: sonarqube:{{ sonarqube_version }}
        restart_policy: always
        ports:
          - '9000:9000'
        env:
          SONAR_JDBC_URL: "jdbc:postgresql://postgresql:5432/sonar"
          SONAR_JDBC_USERNAME: "{{ postgres_user }}"
          SONAR_JDBC_PASSWORD: "{{ postgres_password }}"
        volumes:
          - /opt/sonarqube/data:/opt/sonarqube/data
          - /opt/sonarqube/extensions:/opt/sonarqube/extensions
          - /opt/sonarqube/logs:/opt/sonarqube/logs
        networks:
        - name: "{{ sonarqube_network }}"
      when: inventory_hostname == 'sonarqube'

    - name: Get default password for GitLab
      ansible.builtin.command: docker exec gitlab grep 'Password:' /etc/gitlab/initial_root_password
      register: gitlab
      when: inventory_hostname == 'gitlab'

    - name: Show password for GitLab
      ansible.builtin.debug:
        var: gitlab.stdout
      when: inventory_hostname == 'gitlab'

    - name: Get default password for Jenkins
      ansible.builtin.command: docker exec jenkins-blueocean cat /var/jenkins_home/secrets/initialAdminPassword
      register: jenkins
      when: inventory_hostname == 'jenkins'

    - name: Show password for Jenkins
      ansible.builtin.debug:
        var: jenkins.stdout
      when: inventory_hostname == 'jenkins'